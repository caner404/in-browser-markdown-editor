/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * a minimal OpenAPI documentation for the markdown API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface MarkdownCreate
 */
export interface MarkdownCreate {
    /**
     * 
     * @type {string}
     * @memberof MarkdownCreate
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof MarkdownCreate
     */
    text?: string;
}
/**
 * 
 * @export
 * @interface MarkdownResponse
 */
export interface MarkdownResponse {
    /**
     * 
     * @type {string}
     * @memberof MarkdownResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof MarkdownResponse
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof MarkdownResponse
     */
    text?: string;
    /**
     * 
     * @type {Date}
     * @memberof MarkdownResponse
     */
    createdAt?: Date;
}
/**
 * 
 * @export
 * @interface MarkdownResult
 */
export interface MarkdownResult {
    /**
     * 
     * @type {string}
     * @memberof MarkdownResult
     */
    status?: string;
    /**
     * 
     * @type {MarkdownResponse}
     * @memberof MarkdownResult
     */
    data?: MarkdownResponse;
}
/**
 * 
 * @export
 * @interface MarkdownResultAll
 */
export interface MarkdownResultAll {
    /**
     * 
     * @type {number}
     * @memberof MarkdownResultAll
     */
    result?: number;
    /**
     * 
     * @type {string}
     * @memberof MarkdownResultAll
     */
    status?: string;
    /**
     * 
     * @type {MarkdownResultAllData}
     * @memberof MarkdownResultAll
     */
    data?: MarkdownResultAllData;
}
/**
 * 
 * @export
 * @interface MarkdownResultAllData
 */
export interface MarkdownResultAllData {
    /**
     * 
     * @type {Array<MarkdownResponse>}
     * @memberof MarkdownResultAllData
     */
    markdowns?: Array<MarkdownResponse>;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all markdowns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/markdowns`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Markdown
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsIdDelete(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1MarkdownsIdDelete.');
            }
            const localVarPath = `/api/v1/markdowns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get single markdown
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsIdGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1MarkdownsIdGet.');
            }
            const localVarPath = `/api/v1/markdowns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update markdown
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsIdPatch(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1MarkdownsIdPatch.');
            }
            const localVarPath = `/api/v1/markdowns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create markdown
         * @param {MarkdownCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsPost(body: MarkdownCreate, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1MarkdownsPost.');
            }
            const localVarPath = `/api/v1/markdowns`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MarkdownCreate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all markdowns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MarkdownResultAll> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1MarkdownsGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete Markdown
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsIdDelete(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1MarkdownsIdDelete(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get single markdown
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MarkdownResult> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1MarkdownsIdGet(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary update markdown
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsIdPatch(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MarkdownResult> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1MarkdownsIdPatch(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create markdown
         * @param {MarkdownCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsPost(body: MarkdownCreate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MarkdownResult> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1MarkdownsPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get all markdowns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsGet(options?: any) {
            return DefaultApiFp(configuration).apiV1MarkdownsGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete Markdown
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsIdDelete(id: string, options?: any) {
            return DefaultApiFp(configuration).apiV1MarkdownsIdDelete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get single markdown
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsIdGet(id: string, options?: any) {
            return DefaultApiFp(configuration).apiV1MarkdownsIdGet(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary update markdown
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsIdPatch(id: string, options?: any) {
            return DefaultApiFp(configuration).apiV1MarkdownsIdPatch(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create markdown
         * @param {MarkdownCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MarkdownsPost(body: MarkdownCreate, options?: any) {
            return DefaultApiFp(configuration).apiV1MarkdownsPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get all markdowns
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1MarkdownsGet(options?: any) {
        return DefaultApiFp(this.configuration).apiV1MarkdownsGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete Markdown
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1MarkdownsIdDelete(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiV1MarkdownsIdDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get single markdown
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1MarkdownsIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiV1MarkdownsIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary update markdown
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1MarkdownsIdPatch(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiV1MarkdownsIdPatch(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create markdown
     * @param {MarkdownCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1MarkdownsPost(body: MarkdownCreate, options?: any) {
        return DefaultApiFp(this.configuration).apiV1MarkdownsPost(body, options)(this.fetch, this.basePath);
    }

}
